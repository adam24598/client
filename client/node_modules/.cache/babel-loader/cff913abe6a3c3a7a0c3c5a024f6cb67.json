{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorAction';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from '../actions/types';\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const login = ({\n  name,\n  mdp\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    mdp\n  });\n  axios.post('/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/pc1/Desktop/gomycode/projet/client/src/actions/authAction.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","login","name","mdp","config","headers","body","JSON","stringify","post","logout","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,QAQO,kBARP;AAYA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAYC,QAAZ,KAAyB;AACnDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AAKEH,EAAAA,KAAK,CACNY,GADC,CACG,gBADH,EACqBC,WAAW,CAACH,QAAD,CADhC,EAEDI,IAFC,CAEIC,GAAG,IACPN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAET,WADC;AAEPc,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAHR,EAQDC,KARC,CAQKC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAACR,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAGD,GAbC;AAcD,CApBE;AAuBP,OAAO,MAAMkB,KAAK,GAAE,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAD,KAAcf,QAAQ,IAAE;AAC1C,QAAMgB,MAAM,GAAC;AACXC,IAAAA,OAAO,EAAC;AACN,sBAAgB;AADV;AADG,GAAb;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACN,IAAAA,IAAD;AAAMC,IAAAA;AAAN,GAAf,CAAb;AACAxB,EAAAA,KAAK,CACJ8B,IADD,CACM,WADN,EACkBH,IADlB,EACuBF,MADvB,EAECX,IAFD,CAEMC,GAAG,IACPN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAACN,aADE;AAEPW,IAAAA,OAAO,EAACD,GAAG,CAACE;AAFL,GAAD,CAHV,EAOGC,KAPH,CAOSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CACNR,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,YAAzC,CADN,CAAR;AAGAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAGD,GAdH;AAeD,CAtBM;AA6BP,OAAO,MAAMyB,MAAM,GAAE,MAAI;AACvB,SAAM;AACJpB,IAAAA,IAAI,EAACJ;AADD,GAAN;AAGD,CAJM;AASP,OAAO,MAAMM,WAAW,GAAGH,QAAQ,IAAE;AACnC,QAAMsB,KAAK,GAAGtB,QAAQ,GAAGuB,IAAX,CAAgBD,KAA9B;AAEE,QAAMP,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADE,GAAf;;AAKE,MAAIM,KAAJ,EAAW;AACTP,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCM,KAAjC;AACD;;AACH,SAAOP,MAAP;AACH,CAZM","sourcesContent":["import axios from 'axios';\r\nimport {returnErrors} from './errorAction';\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n\r\n} from '../actions/types';\r\n\r\n\r\n\r\nexport const loadUser = () => (dispatch , getState) => {\r\n    dispatch({ type: USER_LOADING });\r\n\r\n\r\n\r\n    \r\n      axios\r\n    .get('/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n    };\r\n\r\n\r\nexport const login =({name,mdp})=>dispatch=>{\r\n  const config={\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({name,mdp});\r\n  axios\r\n  .post('/api/auth',body,config)\r\n  .then(res =>\r\n    dispatch({\r\n      type:LOGIN_SUCCESS,\r\n      payload:res.data\r\n    }))\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const logout =()=>{\r\n  return{\r\n    type:LOGOUT_SUCCESS\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport const tokenConfig = getState=>{\r\n  const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        }\r\n      };\r\n      if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n      }\r\n    return config;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}